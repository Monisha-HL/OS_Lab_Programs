#include <stdio.h>

#define MAX_TASKS 100

struct Task {
    int id;
    int execution_time;
    int period;
    int next_deadline;
    int remaining_time;
};

void rateMonotonicScheduling(struct Task tasks[], int n, int simulation_time) {
    printf("Rate Monotonic Scheduling Simulation:\n");
    printf("-------------------------------------\n");

    for (int i = 0; i < n; i++) {
        tasks[i].next_deadline = tasks[i].period;
        tasks[i].remaining_time = tasks[i].execution_time;
    }

    for (int time = 0; time < simulation_time; time++) {
        int selected_task = -1;
        int min_deadline = simulation_time + 1;

        for (int i = 0; i < n; i++) {
            if (tasks[i].remaining_time > 0 && tasks[i].next_deadline < min_deadline) {
                selected_task = i;
                min_deadline = tasks[i].next_deadline;
            }
        }

        if (selected_task != -1) {
            tasks[selected_task].remaining_time--;
            printf("At time %d: Task %d is executing\n", time, tasks[selected_task].id);

            if (tasks[selected_task].remaining_time == 0) {
                tasks[selected_task].next_deadline += tasks[selected_task].period;
                tasks[selected_task].remaining_time = tasks[selected_task].execution_time;
            }
        } else {
            printf("At time %d: CPU is idle\n", time);
        }
    }
}

int main() {
    struct Task tasks[MAX_TASKS];
    int n, simulation_time;

    printf("Enter the number of tasks: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter execution time for Task %d: ", i + 1);
        scanf("%d", &tasks[i].execution_time);
        printf("Enter period for Task %d: ", i + 1);
        scanf("%d", &tasks[i].period);
        tasks[i].id = i + 1;
    }

    printf("Enter simulation time: ");
    scanf("%d", &simulation_time);

    rateMonotonicScheduling(tasks, n, simulation_time);

    return 0;
}
