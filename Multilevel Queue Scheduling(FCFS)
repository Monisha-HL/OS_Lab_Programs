#include <stdio.h>

struct Process {
    int pid, burst_time, completion_time, waiting_time, turnaround_time, queue;
};

void calculateTimes(struct Process p[], int n) {
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        current_time += p[i].burst_time;
        p[i].completion_time = current_time;
        p[i].turnaround_time = p[i].completion_time;
        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;
    }
}

void displayAndCalculateAverages(struct Process p[], int n) {
    int total_tat = 0, total_wt = 0;
    printf("PID\tQueue\tBurst\tCompletion\tTAT\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\n", p[i].pid, p[i].queue, p[i].burst_time,
               p[i].completion_time, p[i].turnaround_time, p[i].waiting_time);
        total_tat += p[i].turnaround_time;
        total_wt += p[i].waiting_time;
    }
    printf("\nAverage Turnaround Time: %.2f\n", (float)total_tat / n);
    printf("Average Waiting Time: %.2f\n", (float)total_wt / n);
}

int main() {
    int n, count = 0;
    struct Process processes[20];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter the queue for Process %d (1 or 2): ", i + 1);
        scanf("%d", &processes[i].queue);
    }

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].queue > processes[j + 1].queue) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    printf("\nScheduling (FCFS):\n");
    calculateTimes(processes, n);
    displayAndCalculateAverages(processes, n);

    return 0;
}
