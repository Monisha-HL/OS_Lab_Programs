#include <stdio.h>
#include <limits.h>

int search(int key, int frame[], int frames) {
    for (int i = 0; i < frames; i++)
        if (frame[i] == key)
            return i;
    return -1;
}

// FIFO Page Replacement
void fifo(int pages[], int n, int frames) {
    int frame[frames];
    int pointer = 0, faults = 0;

    for (int i = 0; i < frames; i++) frame[i] = -1;

    printf("\nFIFO Page Replacement:\n");

    for (int i = 0; i < n; i++) {
        if (search(pages[i], frame, frames) == -1) {
            frame[pointer] = pages[i];
            pointer = (pointer + 1) % frames;
            faults++;
        }

        printf("Page %d: ", pages[i]);
        for (int j = 0; j < frames; j++)
            if (frame[j] != -1) printf("%d ", frame[j]);
        printf("\n");
    }

    printf("Total Page Faults (FIFO): %d\n", faults);
}

// LRU Page Replacement
void lru(int pages[], int n, int frames) {
    int frame[frames], time[frames];
    int faults = 0, t = 0;

    for (int i = 0; i < frames; i++) {
        frame[i] = -1;
        time[i] = 0;
    }

    printf("\nLRU Page Replacement:\n");

    for (int i = 0; i < n; i++) {
        int idx = search(pages[i], frame, frames);
        if (idx == -1) {
            int lruIndex = 0, minTime = time[0];
            for (int j = 1; j < frames; j++) {
                if (time[j] < minTime) {
                    minTime = time[j];
                    lruIndex = j;
                }
            }
            frame[lruIndex] = pages[i];
            time[lruIndex] = ++t;
            faults++;
        } else {
            time[idx] = ++t;
        }

        printf("Page %d: ", pages[i]);
        for (int j = 0; j < frames; j++)
            if (frame[j] != -1) printf("%d ", frame[j]);
        printf("\n");
    }

    printf("Total Page Faults (LRU): %d\n", faults);
}

// Optimal Page Replacement
void optimal(int pages[], int n, int frames) {
    int frame[frames];
    int faults = 0;

    for (int i = 0; i < frames; i++) frame[i] = -1;

    printf("\nOptimal Page Replacement:\n");

    for (int i = 0; i < n; i++) {
        if (search(pages[i], frame, frames) == -1) {
            int replaceIdx = -1, farthest = i + 1;

            for (int j = 0; j < frames; j++) {
                int found = 0;
                for (int k = i + 1; k < n; k++) {
                    if (frame[j] == pages[k]) {
                        if (k > farthest) {
                            farthest = k;
                            replaceIdx = j;
                        }
                        found = 1;
                        break;
                    }
                }
                if (!found) {
                    replaceIdx = j;
                    break;
                }
            }

            if (replaceIdx == -1) replaceIdx = 0;

            frame[replaceIdx] = pages[i];
            faults++;
        }

        printf("Page %d: ", pages[i]);
        for (int j = 0; j < frames; j++)
            if (frame[j] != -1) printf("%d ", frame[j]);
        printf("\n");
    }

    printf("Total Page Faults (Optimal): %d\n", faults);
}

int main() {
    int pages[100], n, frames;

    printf("Enter number of pages: ");
    scanf("%d", &n);

    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &pages[i]);

    printf("Enter number of frames: ");
    scanf("%d", &frames);

    fifo(pages, n, frames);
    lru(pages, n, frames);
    optimal(pages, n, frames);

    return 0;
}
