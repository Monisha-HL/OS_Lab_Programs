#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TOTAL_DISK_BLOCKS 32
#define TOTAL_DISK_INODES 8

#ifndef MAX
#define MAX 15
#endif

int blockStatus[TOTAL_DISK_BLOCKS];
struct file_table {
    char fileName[20];
    int startBlock;
    int fileSize;
    int allotStatus;
};

struct file_table fileTable[TOTAL_DISK_BLOCKS - TOTAL_DISK_INODES];

int AllocateBlocks(int Size) {
    int startBlock = 8;
    int count = 0;

    for (int i = startBlock; i < TOTAL_DISK_BLOCKS; i++) {
        if (blockStatus[i] == 0) {
            count++;
            if (count == Size) {
                for (int j = i - Size + 1; j <= i; j++) {
                    blockStatus[j] = 1;
                }
                return i - Size + 1;
            }
        } else {
            count = 0;
        }
    }

    return -1;
}

int main() {
    int i = 0, j = 0, numFiles = 0, ret = -1;

    for (i = 0; i < TOTAL_DISK_BLOCKS; i++) {
        blockStatus[i] = 0;
    }

    printf("File allocation method: SEQUENTIAL\n");
    printf("Total blocks: %d\n", TOTAL_DISK_BLOCKS);
    printf("File allocation start at block: %d\n", 8);
    printf("File allocation end at block: %d\n", TOTAL_DISK_BLOCKS - 1);
    printf("Size (kB) of each block: 1\n\n");
    printf("Enter number of files: ");
    scanf("%d", &numFiles);

    for (i = 0; i < numFiles; i++) {
        printf("\nEnter the name of file #%d: ", i + 1);
        scanf("%s", fileTable[i].fileName);
        printf("Enter the size (kB) of file #%d: ", i + 1);
        scanf("%d", &fileTable[i].fileSize);

        ret = AllocateBlocks(fileTable[i].fileSize);

        if (ret == -1) {
            printf("Not enough space to allocate file %s\n", fileTable[i].fileName);
            exit(0);
        } else {
            fileTable[i].startBlock = ret;
        }
    }

    printf("\n%*s %*s %*s\n", -MAX, "FILE_fileName", -MAX, "FILE_SIZE", MAX, "BLOCKS_OCCUPIED");

    for (j = 0; j < numFiles; j++) {
        printf("\n%*s %*d ", -MAX, fileTable[j].fileName, -MAX, fileTable[j].fileSize);
        for (int k = 0; k < fileTable[j].fileSize; k++) {
            printf("%d%s", fileTable[j].startBlock + k, (k == fileTable[j].fileSize - 1) ? "" : "-");
        }
    }
    printf("\nFile allocation completed. Exiting.\n");

    return 0;
}
